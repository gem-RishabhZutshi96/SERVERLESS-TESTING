# Welcome to Serverless!
#
# This file is the main config file for your service.
#
# Happy Coding!

service: employee
frameworkVersion: '3'

custom:
  common: ${file(../../serverless.common.yml)}

package:
  individually: true

plugins:
  - serverless-offline
  - serverless-offline-lambda-invoke
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-bundle

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${self:custom.common.serverlessConfiguration.stage}
  region: ${self:custom.common.serverlessConfiguration.region}
  environment: ${self:custom.common.serverlessConfiguration.environment}
  tracing:
    apiGateway: true
    lambda: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
functions:
  authorizerFunc:
    handler: auth/generatePolicy.main
    timeout: 30
    cors: true
    events:
      - http:
        integration: lambda
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "lambda:InvokeFunction"
        Resource: "*"
  getEmployeesForSource:
    handler: apis/getEmployeesForSource.getEmployeesForSource
    events: 
      - http:
          method: GET
          path: employee/{source}
          authorizer: authorizerFunc
          cors: true
          integration: lambda
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"     
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "lambda:InvokeFunction"
        Resource: "*" 
  getEmployeesForDirectory:
    handler: apis/getEmployeeForDirectory.getEmployeeForDirectory
    events: 
      - http:
          method: GET
          path: employee/directory
          authorizer: authorizerFunc
          cors: true
          integration: lambda
          request:
            parameters:
              querystrings:
                pageNo: true
                perPage: true
                pattern: false
                source: true
                sort: false
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"      
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "lambda:InvokeFunction"
        Resource: "*" 
  getEmployeesForDirectoryById:
    handler: apis/getEmployeeForDirectoryById.getEmployeeForDirectoryById
    events: 
      - http:
          method: GET
          path: employee/directory/{id}
          authorizer: authorizerFunc
          cors: true
          integration: lambda
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "lambda:InvokeFunction"
        Resource: "*" 
  signedUrlForDocumentUpload:
    handler: apis/getSignedUrlForDocumentUpload.getSignedUrlForDocumentUpload
    events: 
      - http:
          method: POST
          path: employee/document/{id}
          authorizer: authorizerFunc
          cors: true
          integration: lambda
          request:
            parameters:
              querystrings:
                type: true
                key: true
                officialID: true
                name: true
                pimcoId: false
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "lambda:InvokeFunction"
        Resource: "*" 
  uploadDocumentUrlTODb:
    handler: apis/documentS3Url.documentS3Url
    events: 
      - http:
          method: POST
          path: employee/documentS3Url/{id}
          authorizer: authorizerFunc
          cors: true
          integration: lambda
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "lambda:InvokeFunction"
        Resource: "*" 
  deleteDocumentS3:
    handler: apis/deleteDocumentFromS3.deleteDocumentFromS3
    events: 
      - http:
          method: POST
          path: employee/document/delete/{id}
          authorizer: authorizerFunc
          cors: true
          integration: lambda
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "lambda:InvokeFunction"
        Resource: "*" 
  exportExcel:
    handler: apis/exportExcelOfEmployees.exportExcelOfEmployees
    events: 
      - http:
          method: GET
          path: employee/excel
          authorizer: authorizerFunc
          cors: true
          integration: lambda
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "lambda:InvokeFunction"
        Resource: "*"         
  signedUrlForDocumentView:
    handler: apis/getSignedUrlForDocumentView.getSignedUrlForDocumentView
    events: 
      - http:
          method: POST
          path: employee/getSignedUrlForDocumentView
          authorizer: authorizerFunc
          cors: true
          integration: lambda
          response:
            headers:
              Access-Control-Allow-Origin: "'*'" 
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "lambda:InvokeFunction"
        Resource: "*"        
  signedUrlForImageUpload:
    handler: apis/getSignedUrlForImageUpload.getSignedUrlForImageUpload
    events: 
      - http:
          method: POST
          path: employee/getSignedUrlForImageUpload
          authorizer: authorizerFunc
          cors: true
          integration: lambda
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"    
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "lambda:InvokeFunction"
        Resource: "*"   
  documentImageUploadToDb:
    handler: apis/documentImageUpload.documentImageUpload
    events: 
      - http:
          method: POST
          path: employee/picture/{id}
          authorizer: authorizerFunc
          cors: true
          integration: lambda
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"    
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "lambda:InvokeFunction"
        Resource: "*"   
  updateEmployeeDetails:
    handler: apis/updateEmployeeDetailsDb.updateEmployeeDetailsDb
    events: 
      - http:
          method: PUT
          path: employee/update/{id}
          authorizer: authorizerFunc
          cors: true
          integration: lambda
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "lambda:InvokeFunction"
        Resource: "*" 
          