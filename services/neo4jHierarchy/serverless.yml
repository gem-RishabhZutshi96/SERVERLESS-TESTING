# Welcome to Serverless!
#
# This file is the main config file for your service.
#
# Happy Coding!

service: neo4jHierarchy
frameworkVersion: '3'

custom:
  common: ${file(../../serverless.common.yml)}

package:
  individually: true

plugins:
  - serverless-offline
  - serverless-offline-lambda-invoke
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-bundle

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${self:custom.common.serverlessConfiguration.stage}
  region: ${self:custom.common.serverlessConfiguration.region}
  environment: ${self:custom.common.serverlessConfiguration.environment}
  tracing:
    apiGateway: true
    lambda: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
functions:
  authorizerFunc:
    handler: auth/generatePolicy.main
    timeout: 30
    cors: true
    events:
      - http:
        integration: lambda
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "lambda:InvokeFunction"
        Resource: "*"
  getSignedUrlForExcelUpload:
    handler: apis/getSignedUrlForExcelUpload.getSignedUrlForExcelUpload
    timeout: 30
    events: 
      - http:
          method: GET
          path: hierarchy/getSignedUrlForExcelUpload
          authorizer: authorizerFunc
          cors: true
          integration: lambda
          request:
            parameters:
              querystrings:
                type: true
                key: true
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "lambda:InvokeFunction"
        Resource: "*" 
  fetchEmployeeHierarchy:
    handler: apis/fetchEmployeeHierarchy.fetchEmployeeHierarchy
    timeout: 30
    events: 
      - http:
          method: GET
          path: hierarchy/{source}
          authorizer: authorizerFunc
          cors: true
          integration: lambda
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "lambda:InvokeFunction"
        Resource: "*" 
  exportExcelHierarchy:
    handler: apis/exportExcelHierarchy.exportExcelHierarchy
    timeout: 30
    events: 
      - http:
          method: GET
          path: hierarchy/export/{source}
          authorizer: authorizerFunc
          cors: true
          integration: lambda
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "lambda:InvokeFunction"
        Resource: "*" 
  createHierarchy:
    handler: apis/createHierarchy.createHierarchy
    timeout: 30
    events: 
      - http:
          method: POST
          path: hierarchy/create/{relation}
          authorizer: authorizerFunc
          cors: true
          integration: lambda
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "lambda:InvokeFunction"
        Resource: "*"
  bulkEditHierarchy:
    handler: apis/bulkEditHierarchy.bulkEditHierarchy
    timeout: 30
    events: 
      - http:
          method: POST
          path: hierarchy/bulkEdit/{relation}
          authorizer: authorizerFunc
          cors: true
          integration: lambda
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "lambda:InvokeFunction"
        Resource: "*"
  addNodeInHierarchy:
    handler: apis/addNodeInHierarchy.addNodeInHierarchy
    timeout: 30
    events: 
      - http:
          method: POST
          path: hierarchy/addNode
          authorizer: authorizerFunc
          cors: true
          integration: lambda
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "lambda:InvokeFunction"
        Resource: "*"
  addDuplicateNodeInHierarchy:
    handler: apis/addDuplicateNodeInHierarchy.addDuplicateNodeInHierarchy
    timeout: 30
    events: 
      - http:
          method: POST
          path: hierarchy/addDuplicateNode
          authorizer: authorizerFunc
          cors: true
          integration: lambda
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "lambda:InvokeFunction"
        Resource: "*"
  deleteNodeInHierarchy:
    handler: apis/deleteNodeInHierarchy.deleteNodeInHierarchy
    timeout: 30
    events: 
      - http:
          method: POST
          path: hierarchy/deleteNode
          authorizer: authorizerFunc
          cors: true
          integration: lambda
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "lambda:InvokeFunction"
        Resource: "*"